The set of all object labels in sg_ir was generated by the following repl interaction:
>>> dir
'data/sg_ir/'
>>> puzzles = os.listdir(dir)
>>> f = lambda x: [dir + x + z + y for z in {'/train/', '/test/'} for y in os.listdir(dir + x + z)]
>>> s = [json.load(open(y)) for z in puzzles for y in f(z)]
>>> a = [y[1] for z in s for y in z['interpretation']['has_label']]
>>> b = list(set(a))
>>> len(b)
124
>>> b
All labels
['screen', 'vase', 'pillow', 'hill', 'bed', 'fruit', 'chair', 'hand', 'animal', 'post', 'coat', 'nose', 'boat', 'bus', 'plate', 'glove', 'desk', 'rock', 'tile', 'wing', 'shelf', 'box', 'tie', 'cow', 'sign', 'seat', 'elephant', 'clock', 'mouth', 'head', 'woman', 'tree', 'window', 'tail', 'bottle', 'girl', 'shirt', 'umbrella', 'glass', 'board', 'cat', 'neck', 'sidewalk', 'flower', 'cup', 'flag', 'phone', 'helmet', 'book', 'counter', 'boot', 'hat', 'arm', 'tire', 'player', 'number', 'mountain', 'toilet', 'drawer', 'sock', 'car', 'paper', 'dog', 'towel', 'person', 'basket', 'orange', 'finger', 'jacket', 'sneaker', 'trunk', 'building', 'ear', 'man', 'shoe', 'street', 'beach', 'sheep', 'food', 'table', 'bowl', 'logo', 'door', 'letter', 'bag', 'wheel', 'face', 'laptop', 'fence', 'plant', 'lamp', 'paw', 'bear', 'eye', 'short', 'child', 'boy', 'sink', 'cap', 'racket', 'house', 'roof', 'leg', 'banana', 'jean', 'cabinet', 'pant', 'stand', 'bike', 'truck', 'windshield', 'curtain', 'handle', 'wire', 'bench', 'light', 'skateboard', 'people', 'pot', 'room', 'hair', 'bird', 'leaf', 'pole']

Labels specific to the 2on1* puzle variants
>>> p2on1 = [p for p in puzzles if p.startswith('2on1')]
Then continue as above
>>> f = lambda x: [dir + x + z + y for z in {'/train/', '/test/'} for y in os.listdir(dir + x + z)]
>>> s = [json.load(open(y)) for z in puzzles for y in f(z)]
>>> a = [y[1] for z in s for y in z['interpretation']['has_label']]
>>> b = list(set(a))
>>> b
['head', 'nose', 'door', 'pillow', 'dog', 'tail', 'leg', 'paw', 'bed', 'curtain', 'eye', 'ear', 'room', 'face', 'chair', 'cat', 'arm', 'seat', 'window', 'table']

Predicates specific to the 2on1* puzzle variants
Same as above until s
>>> c = [y for z in s for y in z['interpretation']]
>>> d = list(set(c))
>>> len(d)
8
>>> d
['of', 'in front of', 'in', 'has', 'behind', 'has_label', 'has_score', 'at']



for p in data/gqa_ir/*/;do echo "Solving ${p}"; cat $p/metadata.txt; echo ""; time python3 scripts/vdpsolve.py $p/ir/ - 2 --autotune || echo "Symbolic solver failed"; echo ""; done 2>&1 | cat > gqa_rand1000_upto2quant.log

filename = 'gqa_part2'
import json
s = open(f'{filename}.log','r').read()
lines = lambda g: [gg.strip() for gg in g.split('\n') if gg.strip()!= ''] 
solution = lambda g: [] if 'No discriminator' in g[3] else [g[4].split('Concept:')[1].strip(),g[5].split('/')[-1].split('.json')[0]]
x = s.split('Solving')[1:]
question = lambda g: g[1].split('question:')[1].strip()
id = lambda g: g[0].split('/')[-2]
intended = lambda g: g[2].split('intended:')[1].strip()
trcand = lambda g: g[0].split('/')[-2].split('__ex__')[1].split('__cand__')
tr_cand = lambda g: [trcand(g)[0].split('_'), trcand(g)[1].split('_')]
tim = lambda g: g[-2].split('user\t')[1]
res = dict()
for y in x:
    xx = lines(y)
    puzd = dict()
    puzd['question'] = question(xx)
    puzd['example_imgs'],puzd['candidate_imgs'] = tr_cand(xx)
    puzd['intended'] = intended(xx)
    puzd['solution'] = solution(xx)
    puzd['time'] = tim(xx)
    res[id(xx)] = puzd

with open(f'{filename}.json','w') as f:
    json.dump(res, f)

